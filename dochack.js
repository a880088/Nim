/* Generated by the Nim Compiler v0.19.9 */
/*   (c) 2019 Andreas Rumpf */

var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;
var NTI41032 = {size: 0,kind: 1,base: null,node: null,finalizer: null};
var NTI189074 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI44862 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI191532 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI79448 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI79444 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI79440 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI79436 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI79432 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI79428 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI79424 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI79420 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI79416 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI79412 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI79408 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI79404 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI79400 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI79396 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI79392 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI79388 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI79384 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI79380 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI79376 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI79372 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI79205 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI79283 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI79281 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI79227 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI79565 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI79563 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI79561 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI79231 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI79229 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI81245 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI44850 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI44858 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI41006 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI59141 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI44808 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI44914 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI41016 = {size: 0,kind: 40,base: null,node: null,finalizer: null};
var NTI41040 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI41042 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI44908 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI44826 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI44828 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI44842 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI44846 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NNI44846 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI44846.node = NNI44846;
var NNI44842 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI44842.node = NNI44842;
var NNI44828 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI44828.node = NNI44828;
NTI44908.base = NTI44826;
NTI44914.base = NTI44826;
var NNI44826 = {kind: 2, len: 6, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI44908, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI41042, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI41040, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI41040, name: "trace", sons: null}, 
{kind: 1, offset: "raiseId", len: 0, typ: NTI41016, name: "raiseId", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI44914, name: "up", sons: null}]};
NTI44826.node = NNI44826;
var NNI44808 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI44808.node = NNI44808;
NTI44826.base = NTI44808;
NTI44828.base = NTI44826;
NTI44842.base = NTI44828;
NTI44846.base = NTI44842;
var NNI59141 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI41042, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI41006, name: "Field1", sons: null}]};
NTI59141.node = NNI59141;
var NNI44858 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI44858.node = NNI44858;
NTI44858.base = NTI44828;
var NNI44850 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI44850.node = NNI44850;
NTI44850.base = NTI44828;
NTI79561.base = NTI79229;
NTI79563.base = NTI79229;
NTI79565.base = NTI79229;
var NNI79227 = {kind: 2, offset: 0, typ: null, name: null, len: 12, sons: {"1": {kind: 1, offset: 1, typ: NTI79227, name: "ElementNode", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI79227, name: "AttributeNode", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI79227, name: "TextNode", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI79227, name: "CDATANode", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI79227, name: "EntityRefNode", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI79227, name: "EntityNode", len: 0, sons: null}, 
"7": {kind: 1, offset: 7, typ: NTI79227, name: "ProcessingInstructionNode", len: 0, sons: null}, 
"8": {kind: 1, offset: 8, typ: NTI79227, name: "CommentNode", len: 0, sons: null}, 
"9": {kind: 1, offset: 9, typ: NTI79227, name: "DocumentNode", len: 0, sons: null}, 
"10": {kind: 1, offset: 10, typ: NTI79227, name: "DocumentTypeNode", len: 0, sons: null}, 
"11": {kind: 1, offset: 11, typ: NTI79227, name: "DocumentFragmentNode", len: 0, sons: null}, 
"12": {kind: 1, offset: 12, typ: NTI79227, name: "NotationNode", len: 0, sons: null}}};
NTI79227.node = NNI79227;
var NNI79283 = {kind: 2, len: 91, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "background", len: 0, typ: NTI41042, name: "background", sons: null}, 
{kind: 1, offset: "backgroundAttachment", len: 0, typ: NTI41042, name: "backgroundAttachment", sons: null}, 
{kind: 1, offset: "backgroundColor", len: 0, typ: NTI41042, name: "backgroundColor", sons: null}, 
{kind: 1, offset: "backgroundImage", len: 0, typ: NTI41042, name: "backgroundImage", sons: null}, 
{kind: 1, offset: "backgroundPosition", len: 0, typ: NTI41042, name: "backgroundPosition", sons: null}, 
{kind: 1, offset: "backgroundRepeat", len: 0, typ: NTI41042, name: "backgroundRepeat", sons: null}, 
{kind: 1, offset: "border", len: 0, typ: NTI41042, name: "border", sons: null}, 
{kind: 1, offset: "borderBottom", len: 0, typ: NTI41042, name: "borderBottom", sons: null}, 
{kind: 1, offset: "borderBottomColor", len: 0, typ: NTI41042, name: "borderBottomColor", sons: null}, 
{kind: 1, offset: "borderBottomStyle", len: 0, typ: NTI41042, name: "borderBottomStyle", sons: null}, 
{kind: 1, offset: "borderBottomWidth", len: 0, typ: NTI41042, name: "borderBottomWidth", sons: null}, 
{kind: 1, offset: "borderColor", len: 0, typ: NTI41042, name: "borderColor", sons: null}, 
{kind: 1, offset: "borderLeft", len: 0, typ: NTI41042, name: "borderLeft", sons: null}, 
{kind: 1, offset: "borderLeftColor", len: 0, typ: NTI41042, name: "borderLeftColor", sons: null}, 
{kind: 1, offset: "borderLeftStyle", len: 0, typ: NTI41042, name: "borderLeftStyle", sons: null}, 
{kind: 1, offset: "borderLeftWidth", len: 0, typ: NTI41042, name: "borderLeftWidth", sons: null}, 
{kind: 1, offset: "borderRight", len: 0, typ: NTI41042, name: "borderRight", sons: null}, 
{kind: 1, offset: "borderRightColor", len: 0, typ: NTI41042, name: "borderRightColor", sons: null}, 
{kind: 1, offset: "borderRightStyle", len: 0, typ: NTI41042, name: "borderRightStyle", sons: null}, 
{kind: 1, offset: "borderRightWidth", len: 0, typ: NTI41042, name: "borderRightWidth", sons: null}, 
{kind: 1, offset: "borderStyle", len: 0, typ: NTI41042, name: "borderStyle", sons: null}, 
{kind: 1, offset: "borderTop", len: 0, typ: NTI41042, name: "borderTop", sons: null}, 
{kind: 1, offset: "borderTopColor", len: 0, typ: NTI41042, name: "borderTopColor", sons: null}, 
{kind: 1, offset: "borderTopStyle", len: 0, typ: NTI41042, name: "borderTopStyle", sons: null}, 
{kind: 1, offset: "borderTopWidth", len: 0, typ: NTI41042, name: "borderTopWidth", sons: null}, 
{kind: 1, offset: "borderWidth", len: 0, typ: NTI41042, name: "borderWidth", sons: null}, 
{kind: 1, offset: "bottom", len: 0, typ: NTI41042, name: "bottom", sons: null}, 
{kind: 1, offset: "captionSide", len: 0, typ: NTI41042, name: "captionSide", sons: null}, 
{kind: 1, offset: "clear", len: 0, typ: NTI41042, name: "clear", sons: null}, 
{kind: 1, offset: "clip", len: 0, typ: NTI41042, name: "clip", sons: null}, 
{kind: 1, offset: "color", len: 0, typ: NTI41042, name: "color", sons: null}, 
{kind: 1, offset: "cursor", len: 0, typ: NTI41042, name: "cursor", sons: null}, 
{kind: 1, offset: "direction", len: 0, typ: NTI41042, name: "direction", sons: null}, 
{kind: 1, offset: "display", len: 0, typ: NTI41042, name: "display", sons: null}, 
{kind: 1, offset: "emptyCells", len: 0, typ: NTI41042, name: "emptyCells", sons: null}, 
{kind: 1, offset: "cssFloat", len: 0, typ: NTI41042, name: "cssFloat", sons: null}, 
{kind: 1, offset: "font", len: 0, typ: NTI41042, name: "font", sons: null}, 
{kind: 1, offset: "fontFamily", len: 0, typ: NTI41042, name: "fontFamily", sons: null}, 
{kind: 1, offset: "fontSize", len: 0, typ: NTI41042, name: "fontSize", sons: null}, 
{kind: 1, offset: "fontStretch", len: 0, typ: NTI41042, name: "fontStretch", sons: null}, 
{kind: 1, offset: "fontStyle", len: 0, typ: NTI41042, name: "fontStyle", sons: null}, 
{kind: 1, offset: "fontVariant", len: 0, typ: NTI41042, name: "fontVariant", sons: null}, 
{kind: 1, offset: "fontWeight", len: 0, typ: NTI41042, name: "fontWeight", sons: null}, 
{kind: 1, offset: "height", len: 0, typ: NTI41042, name: "height", sons: null}, 
{kind: 1, offset: "left", len: 0, typ: NTI41042, name: "left", sons: null}, 
{kind: 1, offset: "letterSpacing", len: 0, typ: NTI41042, name: "letterSpacing", sons: null}, 
{kind: 1, offset: "lineHeight", len: 0, typ: NTI41042, name: "lineHeight", sons: null}, 
{kind: 1, offset: "listStyle", len: 0, typ: NTI41042, name: "listStyle", sons: null}, 
{kind: 1, offset: "listStyleImage", len: 0, typ: NTI41042, name: "listStyleImage", sons: null}, 
{kind: 1, offset: "listStylePosition", len: 0, typ: NTI41042, name: "listStylePosition", sons: null}, 
{kind: 1, offset: "listStyleType", len: 0, typ: NTI41042, name: "listStyleType", sons: null}, 
{kind: 1, offset: "margin", len: 0, typ: NTI41042, name: "margin", sons: null}, 
{kind: 1, offset: "marginBottom", len: 0, typ: NTI41042, name: "marginBottom", sons: null}, 
{kind: 1, offset: "marginLeft", len: 0, typ: NTI41042, name: "marginLeft", sons: null}, 
{kind: 1, offset: "marginRight", len: 0, typ: NTI41042, name: "marginRight", sons: null}, 
{kind: 1, offset: "marginTop", len: 0, typ: NTI41042, name: "marginTop", sons: null}, 
{kind: 1, offset: "maxHeight", len: 0, typ: NTI41042, name: "maxHeight", sons: null}, 
{kind: 1, offset: "maxWidth", len: 0, typ: NTI41042, name: "maxWidth", sons: null}, 
{kind: 1, offset: "minHeight", len: 0, typ: NTI41042, name: "minHeight", sons: null}, 
{kind: 1, offset: "minWidth", len: 0, typ: NTI41042, name: "minWidth", sons: null}, 
{kind: 1, offset: "overflow", len: 0, typ: NTI41042, name: "overflow", sons: null}, 
{kind: 1, offset: "padding", len: 0, typ: NTI41042, name: "padding", sons: null}, 
{kind: 1, offset: "paddingBottom", len: 0, typ: NTI41042, name: "paddingBottom", sons: null}, 
{kind: 1, offset: "paddingLeft", len: 0, typ: NTI41042, name: "paddingLeft", sons: null}, 
{kind: 1, offset: "paddingRight", len: 0, typ: NTI41042, name: "paddingRight", sons: null}, 
{kind: 1, offset: "paddingTop", len: 0, typ: NTI41042, name: "paddingTop", sons: null}, 
{kind: 1, offset: "pageBreakAfter", len: 0, typ: NTI41042, name: "pageBreakAfter", sons: null}, 
{kind: 1, offset: "pageBreakBefore", len: 0, typ: NTI41042, name: "pageBreakBefore", sons: null}, 
{kind: 1, offset: "pointerEvents", len: 0, typ: NTI41042, name: "pointerEvents", sons: null}, 
{kind: 1, offset: "position", len: 0, typ: NTI41042, name: "position", sons: null}, 
{kind: 1, offset: "right", len: 0, typ: NTI41042, name: "right", sons: null}, 
{kind: 1, offset: "scrollbar3dLightColor", len: 0, typ: NTI41042, name: "scrollbar3dLightColor", sons: null}, 
{kind: 1, offset: "scrollbarArrowColor", len: 0, typ: NTI41042, name: "scrollbarArrowColor", sons: null}, 
{kind: 1, offset: "scrollbarBaseColor", len: 0, typ: NTI41042, name: "scrollbarBaseColor", sons: null}, 
{kind: 1, offset: "scrollbarDarkshadowColor", len: 0, typ: NTI41042, name: "scrollbarDarkshadowColor", sons: null}, 
{kind: 1, offset: "scrollbarFaceColor", len: 0, typ: NTI41042, name: "scrollbarFaceColor", sons: null}, 
{kind: 1, offset: "scrollbarHighlightColor", len: 0, typ: NTI41042, name: "scrollbarHighlightColor", sons: null}, 
{kind: 1, offset: "scrollbarShadowColor", len: 0, typ: NTI41042, name: "scrollbarShadowColor", sons: null}, 
{kind: 1, offset: "scrollbarTrackColor", len: 0, typ: NTI41042, name: "scrollbarTrackColor", sons: null}, 
{kind: 1, offset: "tableLayout", len: 0, typ: NTI41042, name: "tableLayout", sons: null}, 
{kind: 1, offset: "textAlign", len: 0, typ: NTI41042, name: "textAlign", sons: null}, 
{kind: 1, offset: "textDecoration", len: 0, typ: NTI41042, name: "textDecoration", sons: null}, 
{kind: 1, offset: "textIndent", len: 0, typ: NTI41042, name: "textIndent", sons: null}, 
{kind: 1, offset: "textTransform", len: 0, typ: NTI41042, name: "textTransform", sons: null}, 
{kind: 1, offset: "transform", len: 0, typ: NTI41042, name: "transform", sons: null}, 
{kind: 1, offset: "top", len: 0, typ: NTI41042, name: "top", sons: null}, 
{kind: 1, offset: "verticalAlign", len: 0, typ: NTI41042, name: "verticalAlign", sons: null}, 
{kind: 1, offset: "visibility", len: 0, typ: NTI41042, name: "visibility", sons: null}, 
{kind: 1, offset: "width", len: 0, typ: NTI41042, name: "width", sons: null}, 
{kind: 1, offset: "wordSpacing", len: 0, typ: NTI41042, name: "wordSpacing", sons: null}, 
{kind: 1, offset: "zIndex", len: 0, typ: NTI41006, name: "zIndex", sons: null}]};
NTI79283.node = NNI79283;
NTI79283.base = NTI44808;
NTI79281.base = NTI79283;
var NNI79231 = {kind: 2, len: 14, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "attributes", len: 0, typ: NTI79561, name: "attributes", sons: null}, 
{kind: 1, offset: "childNodes", len: 0, typ: NTI79563, name: "childNodes", sons: null}, 
{kind: 1, offset: "children", len: 0, typ: NTI79565, name: "children", sons: null}, 
{kind: 1, offset: "data", len: 0, typ: NTI41042, name: "data", sons: null}, 
{kind: 1, offset: "firstChild", len: 0, typ: NTI79229, name: "firstChild", sons: null}, 
{kind: 1, offset: "lastChild", len: 0, typ: NTI79229, name: "lastChild", sons: null}, 
{kind: 1, offset: "nextSibling", len: 0, typ: NTI79229, name: "nextSibling", sons: null}, 
{kind: 1, offset: "nodeName", len: 0, typ: NTI41042, name: "nodeName", sons: null}, 
{kind: 1, offset: "nodeType", len: 0, typ: NTI79227, name: "nodeType", sons: null}, 
{kind: 1, offset: "nodeValue", len: 0, typ: NTI41042, name: "nodeValue", sons: null}, 
{kind: 1, offset: "parentNode", len: 0, typ: NTI79229, name: "parentNode", sons: null}, 
{kind: 1, offset: "previousSibling", len: 0, typ: NTI79229, name: "previousSibling", sons: null}, 
{kind: 1, offset: "innerHTML", len: 0, typ: NTI41042, name: "innerHTML", sons: null}, 
{kind: 1, offset: "style", len: 0, typ: NTI79281, name: "style", sons: null}]};
NTI79231.node = NNI79231;
var NNI79205 = {kind: 2, len: 20, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "onabort", len: 0, typ: NTI79372, name: "onabort", sons: null}, 
{kind: 1, offset: "onblur", len: 0, typ: NTI79376, name: "onblur", sons: null}, 
{kind: 1, offset: "onchange", len: 0, typ: NTI79380, name: "onchange", sons: null}, 
{kind: 1, offset: "onclick", len: 0, typ: NTI79384, name: "onclick", sons: null}, 
{kind: 1, offset: "ondblclick", len: 0, typ: NTI79388, name: "ondblclick", sons: null}, 
{kind: 1, offset: "onerror", len: 0, typ: NTI79392, name: "onerror", sons: null}, 
{kind: 1, offset: "onfocus", len: 0, typ: NTI79396, name: "onfocus", sons: null}, 
{kind: 1, offset: "onkeydown", len: 0, typ: NTI79400, name: "onkeydown", sons: null}, 
{kind: 1, offset: "onkeypress", len: 0, typ: NTI79404, name: "onkeypress", sons: null}, 
{kind: 1, offset: "onkeyup", len: 0, typ: NTI79408, name: "onkeyup", sons: null}, 
{kind: 1, offset: "onload", len: 0, typ: NTI79412, name: "onload", sons: null}, 
{kind: 1, offset: "onmousedown", len: 0, typ: NTI79416, name: "onmousedown", sons: null}, 
{kind: 1, offset: "onmousemove", len: 0, typ: NTI79420, name: "onmousemove", sons: null}, 
{kind: 1, offset: "onmouseout", len: 0, typ: NTI79424, name: "onmouseout", sons: null}, 
{kind: 1, offset: "onmouseover", len: 0, typ: NTI79428, name: "onmouseover", sons: null}, 
{kind: 1, offset: "onmouseup", len: 0, typ: NTI79432, name: "onmouseup", sons: null}, 
{kind: 1, offset: "onreset", len: 0, typ: NTI79436, name: "onreset", sons: null}, 
{kind: 1, offset: "onselect", len: 0, typ: NTI79440, name: "onselect", sons: null}, 
{kind: 1, offset: "onsubmit", len: 0, typ: NTI79444, name: "onsubmit", sons: null}, 
{kind: 1, offset: "onunload", len: 0, typ: NTI79448, name: "onunload", sons: null}]};
NTI79205.node = NNI79205;
NTI79205.base = NTI44808;
NTI79231.base = NTI79205;
NTI79229.base = NTI79231;
NTI81245.base = NTI79229;
NTI191532.base = NTI41042;
var NNI44862 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI44862.node = NNI44862;
NTI44862.base = NTI44828;
var NNI189074 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI41006, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI41032, name: "Field1", sons: null}]};
NTI189074.node = NNI189074;

function makeNimstrLit(c_61038) {
		  var ln = c_61038.length;
  var result = new Array(ln);
  for (var i = 0; i < ln; ++i) {
    result[i] = c_61038.charCodeAt(i);
  }
  return result;
  

	
}

function setConstr() {
		    var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

	
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_62027, src_62028, ti_62029) {
	var result_62219 = null;

		switch (ti_62029.kind) {
		case 21:
		case 22:
		case 23:
		case 5:
			if (!(is_fat_pointer_62001(ti_62029))) {
			result_62219 = src_62028;
			}
			else {
				result_62219 = [src_62028[0], src_62028[1]];
			}
			
			break;
		case 19:
			      if (dest_62027 === null || dest_62027 === undefined) {
        dest_62027 = {};
      }
      else {
        for (var key in dest_62027) { delete dest_62027[key]; }
      }
      for (var key in src_62028) { dest_62027[key] = src_62028[key]; }
      result_62219 = dest_62027;
    
			break;
		case 18:
		case 17:
			if (!((ti_62029.base == null))) {
			result_62219 = nimCopy(dest_62027, src_62028, ti_62029.base);
			}
			else {
			if ((ti_62029.kind == 17)) {
			result_62219 = (dest_62027 === null || dest_62027 === undefined) ? {m_type: ti_62029} : dest_62027;
			}
			else {
				result_62219 = (dest_62027 === null || dest_62027 === undefined) ? {} : dest_62027;
			}
			}
			nimCopyAux(result_62219, src_62028, ti_62029.node);
			break;
		case 24:
		case 4:
		case 27:
		case 16:
			      if (src_62028 === null) {
        result_62219 = null;
      }
      else {
        if (dest_62027 === null || dest_62027 === undefined) {
          dest_62027 = new Array(src_62028.length);
        }
        else {
          dest_62027.length = src_62028.length;
        }
        result_62219 = dest_62027;
        for (var i = 0; i < src_62028.length; ++i) {
          result_62219[i] = nimCopy(result_62219[i], src_62028[i], ti_62029.base);
        }
      }
    
			break;
		case 28:
			      if (src_62028 !== null) {
        result_62219 = src_62028.slice(0);
      }
    
			break;
		default: 
			result_62219 = src_62028;
			break;
		}

	return result_62219;

}

function arrayConstr(len_62271, value_62272, typ_62273) {
		    var result = new Array(len_62271);
    for (var i = 0; i < len_62271; ++i) result[i] = nimCopy(null, value_62272, typ_62273);
    return result;
  

	
}

function cstrToNimstr(c_61055) {
		  var ln = c_61055.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_61055.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_61055.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

	
}

function toJSStr(s_61072) {
		  if (s_61072 === null) return "";
  var len = s_61072.length;
  var asciiPart = new Array(len);
  var fcc = String.fromCharCode;
  var nonAsciiPart = null;
  var nonAsciiOffset = 0;
  for (var i = 0; i < len; ++i) {
    if (nonAsciiPart !== null) {
      var offset = (i - nonAsciiOffset) * 2;
      var code = s_61072[i].toString(16);
      if (code.length == 1) {
        code = "0"+code;
      }
      nonAsciiPart[offset] = "%";
      nonAsciiPart[offset + 1] = code;
    }
    else if (s_61072[i] < 128)
      asciiPart[i] = fcc(s_61072[i]);
    else {
      asciiPart.length = i;
      nonAsciiOffset = i;
      nonAsciiPart = new Array((len - i) * 2);
      --i;
    }
  }
  asciiPart = asciiPart.join("");
  return (nonAsciiPart === null) ?
      asciiPart : asciiPart + decodeURIComponent(nonAsciiPart.join(""));
  

	
}

function raiseException(e_59618, ename_59619) {
		e_59618.name = ename_59619;
		if ((excHandler == 0)) {
		unhandledException(e_59618);
		}
		
		e_59618.trace = nimCopy(null, raw_write_stack_trace_59438(), NTI41040);
		throw e_59618;

	
}

function addInt(a_61403, b_61404) {
		    var result = a_61403 + b_61404;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

	
}

function chckIndx(i_62290, a_62291, b_62292) {
			var Tmp1;

	var result_62293 = 0;

	BeforeRet: do {
			if (!(a_62291 <= i_62290)) Tmp1 = false; else {				Tmp1 = (i_62290 <= b_62292);			}		if (Tmp1) {
		result_62293 = i_62290;
		break BeforeRet;
		}
		else {
		raiseIndexError(i_62290, a_62291, b_62292);
		}
		
	} while (false);

	return result_62293;

}

function subInt(a_61421, b_61422) {
		    var result = a_61421 - b_61422;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

	
}
var ConstSet2 = setConstr([65, 90]);

function chckRange(i_62309, a_62310, b_62311) {
			var Tmp1;

	var result_62312 = 0;

	BeforeRet: do {
			if (!(a_62310 <= i_62309)) Tmp1 = false; else {				Tmp1 = (i_62309 <= b_62311);			}		if (Tmp1) {
		result_62312 = i_62309;
		break BeforeRet;
		}
		else {
		raiseRangeError();
		}
		
	} while (false);

	return result_62312;

}
var ConstSet3 = setConstr(95, 32, 46);
var ConstSet4 = setConstr(95, 32, 46);

function mulInt(a_61439, b_61440) {
		    var result = a_61439 * b_61440;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

	
}
var ConstSet5 = setConstr([97, 122]);
var ConstSet6 = setConstr([65, 90], [97, 122]);
var ConstSet7 = setConstr([97, 122]);
var ConstSet8 = setConstr([65, 90]);

function nimMax(a_61758, b_61759) {
		var Tmp1;

	var result_61760 = 0;

	BeforeRet: do {
		if ((b_61759 <= a_61758)) {
		Tmp1 = a_61758;
		}
		else {
		Tmp1 = b_61759;
		}
		
		result_61760 = Tmp1;
		break BeforeRet;
	} while (false);

	return result_61760;

}

function nimMin(a_61740, b_61741) {
		var Tmp1;

	var result_61742 = 0;

	BeforeRet: do {
		if ((a_61740 <= b_61741)) {
		Tmp1 = a_61740;
		}
		else {
		Tmp1 = b_61741;
		}
		
		result_61742 = Tmp1;
		break BeforeRet;
	} while (false);

	return result_61742;

}
var nim_program_result = 0;
var global_raise_hook_56618 = [null];
var local_raise_hook_56623 = [null];
var out_of_mem_hook_56626 = [null];
  if (!Math.trunc) {
    Math.trunc = function(v) {
      v = +v;
      if (!isFinite(v)) return v;

      return (v - v % 1)   ||   (v < 0 ? -0 : v === 0 ? v : 0);
    };
  }
var alternative_191285 = [null];

function is_fat_pointer_62001(ti_62003) {
	var result_62004 = false;

	BeforeRet: do {
		result_62004 = !((ConstSet1[ti_62003.base.kind] != undefined));
		break BeforeRet;
	} while (false);

	return result_62004;

}

function nimCopyAux(dest_62032, src_62033, n_62035) {
		switch (n_62035.kind) {
		case 0:
			break;
		case 1:
			      dest_62032[n_62035.offset] = nimCopy(dest_62032[n_62035.offset], src_62033[n_62035.offset], n_62035.typ);
    
			break;
		case 2:
			    for (var i = 0; i < n_62035.sons.length; i++) {
      nimCopyAux(dest_62032, src_62033, n_62035.sons[i]);
    }
    
			break;
		case 3:
			      dest_62032[n_62035.offset] = nimCopy(dest_62032[n_62035.offset], src_62033[n_62035.offset], n_62035.typ);
      for (var i = 0; i < n_62035.sons.length; ++i) {
        nimCopyAux(dest_62032, src_62033, n_62035.sons[i][1]);
      }
    
			break;
		}

	
}

function add_56638(x_56641, x_56641_Idx, y_56642) {
		      if (x_56641[x_56641_Idx] === null) { x_56641[x_56641_Idx] = []; }
      var off = x_56641[x_56641_Idx].length;
      x_56641[x_56641_Idx].length += y_56642.length;
      for (var i = 0; i < y_56642.length; ++i) {
        x_56641[x_56641_Idx][off+i] = y_56642.charCodeAt(i);
      }
    

	
}

function aux_write_stack_trace_59136(f_59138) {
					var Tmp3;

	var result_59139 = [null];

		var it_59147 = f_59138;
		var i_59149 = 0;
		var total_59151 = 0;
		var temp_frames_59158 = arrayConstr(64, {Field0: null, Field1: 0}, NTI59141);
		L1: do {
				L2: while (true) {
					if (!!((it_59147 == null))) Tmp3 = false; else {						Tmp3 = (i_59149 <= 63);					}				if (!Tmp3) break L2;
					temp_frames_59158[i_59149].Field0 = it_59147.procname;
					temp_frames_59158[i_59149].Field1 = it_59147.line;
					i_59149 += 1;
					total_59151 += 1;
					it_59147 = it_59147.prev;
				}
		} while(false);
		L4: do {
				L5: while (true) {
				if (!!((it_59147 == null))) break L5;
					total_59151 += 1;
					it_59147 = it_59147.prev;
				}
		} while(false);
		result_59139[0] = nimCopy(null, [], NTI41040);
		if (!((total_59151 == i_59149))) {
		if (result_59139[0] != null) { result_59139[0] = (result_59139[0]).concat(makeNimstrLit("(")); } else { result_59139[0] = makeNimstrLit("("); };
		if (result_59139[0] != null) { result_59139[0] = (result_59139[0]).concat(cstrToNimstr(((total_59151 - i_59149))+"")); } else { result_59139[0] = cstrToNimstr(((total_59151 - i_59149))+"").slice(); };
		if (result_59139[0] != null) { result_59139[0] = (result_59139[0]).concat(makeNimstrLit(" calls omitted) ...\x0A")); } else { result_59139[0] = makeNimstrLit(" calls omitted) ...\x0A"); };
		}
		
		L6: do {
			var j_59421 = 0;
			var colontmp__191426 = 0;
			colontmp__191426 = (i_59149 - 1);
			var res_191431 = colontmp__191426;
			L7: do {
					L8: while (true) {
					if (!(0 <= res_191431)) break L8;
						j_59421 = res_191431;
						add_56638(result_59139, 0, temp_frames_59158[j_59421].Field0);
						if ((0 < temp_frames_59158[j_59421].Field1)) {
						if (result_59139[0] != null) { result_59139[0] = (result_59139[0]).concat(makeNimstrLit(", line: ")); } else { result_59139[0] = makeNimstrLit(", line: "); };
						if (result_59139[0] != null) { result_59139[0] = (result_59139[0]).concat(cstrToNimstr((temp_frames_59158[j_59421].Field1)+"")); } else { result_59139[0] = cstrToNimstr((temp_frames_59158[j_59421].Field1)+"").slice(); };
						}
						
						if (result_59139[0] != null) { result_59139[0] = (result_59139[0]).concat(makeNimstrLit("\x0A")); } else { result_59139[0] = makeNimstrLit("\x0A"); };
						res_191431 -= 1;
					}
			} while(false);
		} while(false);

	return result_59139[0];

}

function raw_write_stack_trace_59438() {
	var result_59440 = null;

		if (!((framePtr == null))) {
		result_59440 = nimCopy(null, (makeNimstrLit("Traceback (most recent call last)\x0A") || []).concat(aux_write_stack_trace_59136(framePtr) || []), NTI41040);
		}
		else {
			result_59440 = nimCopy(null, makeNimstrLit("No stack traceback available\x0A"), NTI41040);
		}
		

	return result_59440;

}

function unhandledException(e_59499) {
		var buf_59500 = [[]];
		if (!(((e_59499.message != null ? e_59499.message.length : 0) == 0))) {
		if (buf_59500[0] != null) { buf_59500[0] = (buf_59500[0]).concat(makeNimstrLit("Error: unhandled exception: ")); } else { buf_59500[0] = makeNimstrLit("Error: unhandled exception: "); };
		if (buf_59500[0] != null) { buf_59500[0] = (buf_59500[0]).concat(e_59499.message); } else { buf_59500[0] = e_59499.message.slice(); };
		}
		else {
		if (buf_59500[0] != null) { buf_59500[0] = (buf_59500[0]).concat(makeNimstrLit("Error: unhandled exception")); } else { buf_59500[0] = makeNimstrLit("Error: unhandled exception"); };
		}
		
		if (buf_59500[0] != null) { buf_59500[0] = (buf_59500[0]).concat(makeNimstrLit(" [")); } else { buf_59500[0] = makeNimstrLit(" ["); };
		add_56638(buf_59500, 0, e_59499.name);
		if (buf_59500[0] != null) { buf_59500[0] = (buf_59500[0]).concat(makeNimstrLit("]\x0A")); } else { buf_59500[0] = makeNimstrLit("]\x0A"); };
		if (buf_59500[0] != null) { buf_59500[0] = (buf_59500[0]).concat(raw_write_stack_trace_59438()); } else { buf_59500[0] = raw_write_stack_trace_59438().slice(); };
		var cbuf_59601 = toJSStr(buf_59500[0]);
		framePtr = null;
		  if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_59601);
  }
  else {
    throw cbuf_59601;
  }
  

	
}

function raiseOverflow() {
		var e_60026 = null;
		e_60026 = {m_type: NTI44846, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		e_60026.message = nimCopy(null, makeNimstrLit("over- or underflow"), NTI41040);
		e_60026.parent = null;
		raiseException(e_60026, "OverflowError");

	
}

function is_whitespace_190639(text_190641) {
		     return !/[^\s]/.test(text_190641);
  

	
}

function is_whitespace_190656(x_190658) {
		var Tmp1;
		var Tmp2;

	var result_190659 = false;

	var F={procname:"dochack.isWhitespace",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		F.line = 134;
		if (!(x_190658.nodeName == "#text")) Tmp2 = false; else {			Tmp2 = is_whitespace_190639(x_190658.textContent);		}		if (Tmp2) Tmp1 = true; else {			Tmp1 = (x_190658.nodeName == "#comment");		}		result_190659 = Tmp1;
	framePtr = F.prev;

	return result_190659;

}

function raiseIndexError(i_60623, a_60624, b_60625) {
		var e_60629 = null;
		e_60629 = {m_type: NTI44858, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		e_60629.message = nimCopy(null, (makeNimstrLit("index ") || []).concat(cstrToNimstr((i_60623)+"") || [],makeNimstrLit(" not in ") || [],cstrToNimstr((a_60624)+"") || [],makeNimstrLit(" .. ") || [],cstrToNimstr((b_60625)+"") || []), NTI41040);
		e_60629.parent = null;
		raiseException(e_60629, "IndexError");

	
}

function to_toc_190673(x_190675, father_190676) {
								var Tmp5;
						var Tmp6;
						var Tmp7;
						var Tmp8;
			var Tmp15;

	var F={procname:"dochack.toToc",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		if ((x_190675.nodeName == "UL")) {
		F.line = 139;
		var f_190695 = {heading: null, kids: [], sortId: (father_190676.kids != null ? father_190676.kids.length : 0), doSort: false};
		F.line = 140;
		var i_190697 = 0;
		L1: do {
			F.line = 141;
				L2: while (true) {
				if (!(i_190697 < x_190675.childNodes.length)) break L2;
					F.line = 142;
					var nxt_190698 = addInt(i_190697, 1);
					L3: do {
						F.line = 143;
							L4: while (true) {
								if (!(nxt_190698 < x_190675.childNodes.length)) Tmp5 = false; else {									Tmp5 = is_whitespace_190656(x_190675.childNodes[nxt_190698]);								}							if (!Tmp5) break L4;
								F.line = 144;
								nxt_190698 = addInt(nxt_190698, 1);
							}
					} while(false);
						if (!(nxt_190698 < x_190675.childNodes.length)) Tmp8 = false; else {							Tmp8 = (x_190675.childNodes[i_190697].nodeName == "LI");						}						if (!Tmp8) Tmp7 = false; else {							Tmp7 = (x_190675.childNodes[i_190697].childNodes.length == 1);						}						if (!Tmp7) Tmp6 = false; else {							Tmp6 = (x_190675.childNodes[nxt_190698].nodeName == "UL");						}					if (Tmp6) {
					F.line = 147;
					var e_190723 = {heading: x_190675.childNodes[i_190697].childNodes[0], kids: [], sortId: (f_190695.kids != null ? f_190695.kids.length : 0), doSort: false};
					F.line = 148;
					var it_190724 = x_190675.childNodes[nxt_190698];
					L9: do {
						F.line = 149;
						var j_190731 = 0;
						F.line = 2607;
						var colontmp__191402 = 0;
						F.line = 149;
						colontmp__191402 = it_190724.childNodes.length;
						F.line = 2608;
						var i_191403 = 0;
						L10: do {
							F.line = 2609;
								L11: while (true) {
								if (!(i_191403 < colontmp__191402)) break L11;
									F.line = 149;
									j_190731 = i_191403;
									F.line = 150;
									to_toc_190673(it_190724.childNodes[j_190731], e_190723);
									F.line = 2611;
									i_191403 = addInt(i_191403, 1);
								}
						} while(false);
					} while(false);
					F.line = 151;
					if (f_190695.kids != null) { f_190695.kids.push(e_190723); } else { f_190695.kids = [e_190723]; };
					F.line = 152;
					i_190697 = addInt(nxt_190698, 1);
					}
					else {
						F.line = 154;
						to_toc_190673(x_190675.childNodes[i_190697], f_190695);
						F.line = 155;
						i_190697 = addInt(i_190697, 1);
					}
					
				}
		} while(false);
		F.line = 156;
		if (father_190676.kids != null) { father_190676.kids.push(f_190695); } else { father_190676.kids = [f_190695]; };
		}
		else {
		if (is_whitespace_190656(x_190675)) {
		}
		else {
		if ((x_190675.nodeName == "LI")) {
		F.line = 160;
		var idx_190766 = [];
		L12: do {
			F.line = 161;
			var i_190773 = 0;
			F.line = 2607;
			var colontmp__191407 = 0;
			F.line = 161;
			colontmp__191407 = x_190675.childNodes.length;
			F.line = 2608;
			var i_191408 = 0;
			L13: do {
				F.line = 2609;
					L14: while (true) {
					if (!(i_191408 < colontmp__191407)) break L14;
						F.line = 161;
						i_190773 = i_191408;
						if (!(is_whitespace_190656(x_190675.childNodes[i_190773]))) {
						F.line = 162;
						if (idx_190766 != null) { idx_190766.push(i_190773); } else { idx_190766 = [i_190773]; };
						}
						
						F.line = 2611;
						i_191408 = addInt(i_191408, 1);
					}
			} while(false);
		} while(false);
			if (!((idx_190766 != null ? idx_190766.length : 0) == 2)) Tmp15 = false; else {				Tmp15 = (x_190675.childNodes[idx_190766[chckIndx(1, 0, idx_190766.length+0-1)-0]].nodeName == "UL");			}		if (Tmp15) {
		F.line = 164;
		var e_190804 = {heading: x_190675.childNodes[idx_190766[chckIndx(0, 0, idx_190766.length+0-1)-0]], kids: [], sortId: (father_190676.kids != null ? father_190676.kids.length : 0), doSort: false};
		F.line = 166;
		var it_190805 = x_190675.childNodes[idx_190766[chckIndx(1, 0, idx_190766.length+0-1)-0]];
		L16: do {
			F.line = 167;
			var j_190812 = 0;
			F.line = 2607;
			var colontmp__191413 = 0;
			F.line = 167;
			colontmp__191413 = it_190805.childNodes.length;
			F.line = 2608;
			var i_191414 = 0;
			L17: do {
				F.line = 2609;
					L18: while (true) {
					if (!(i_191414 < colontmp__191413)) break L18;
						F.line = 167;
						j_190812 = i_191414;
						F.line = 168;
						to_toc_190673(it_190805.childNodes[j_190812], e_190804);
						F.line = 2611;
						i_191414 = addInt(i_191414, 1);
					}
			} while(false);
		} while(false);
		F.line = 169;
		if (father_190676.kids != null) { father_190676.kids.push(e_190804); } else { father_190676.kids = [e_190804]; };
		}
		else {
			L19: do {
				F.line = 171;
				var i_190826 = 0;
				F.line = 2607;
				var colontmp__191418 = 0;
				F.line = 171;
				colontmp__191418 = x_190675.childNodes.length;
				F.line = 2608;
				var i_191419 = 0;
				L20: do {
					F.line = 2609;
						L21: while (true) {
						if (!(i_191419 < colontmp__191418)) break L21;
							F.line = 171;
							i_190826 = i_191419;
							F.line = 172;
							to_toc_190673(x_190675.childNodes[i_190826], father_190676);
							F.line = 2611;
							i_191419 = addInt(i_191419, 1);
						}
				} while(false);
			} while(false);
		}
		
		}
		else {
			F.line = 174;
		if (father_190676.kids != null) { father_190676.kids.push({heading: x_190675, kids: [], sortId: (father_190676.kids != null ? father_190676.kids.length : 0), doSort: false}); } else { father_190676.kids = [{heading: x_190675, kids: [], sortId: (father_190676.kids != null ? father_190676.kids.length : 0), doSort: false}]; };
		}
		}}
	framePtr = F.prev;

	
}

function extract_items_190307(x_190309, heading_190310, items_190313, items_190313_Idx) {
			var Tmp1;

	var F={procname:"dochack.extractItems",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if ((x_190309 == null)) {
		F.line = 81;
		break BeforeRet;
		}
		
			if (!!((x_190309.heading == null))) Tmp1 = false; else {				Tmp1 = (x_190309.heading.textContent == heading_190310);			}		if (Tmp1) {
		L2: do {
			F.line = 83;
			var i_190341 = 0;
			F.line = 2607;
			var colontmp__191443 = 0;
			F.line = 83;
			colontmp__191443 = (x_190309.kids != null ? x_190309.kids.length : 0);
			F.line = 2608;
			var i_191444 = 0;
			L3: do {
				F.line = 2609;
					L4: while (true) {
					if (!(i_191444 < colontmp__191443)) break L4;
						F.line = 83;
						i_190341 = i_191444;
						F.line = 84;
						if (items_190313[items_190313_Idx] != null) { items_190313[items_190313_Idx].push(x_190309.kids[chckIndx(i_190341, 0, x_190309.kids.length+0-1)-0].heading); } else { items_190313[items_190313_Idx] = [x_190309.kids[chckIndx(i_190341, 0, x_190309.kids.length+0-1)-0].heading]; };
						F.line = 2611;
						i_191444 = addInt(i_191444, 1);
					}
			} while(false);
		} while(false);
		}
		else {
			L5: do {
				F.line = 86;
				var i_190360 = 0;
				F.line = 2607;
				var colontmp__191448 = 0;
				F.line = 86;
				colontmp__191448 = (x_190309.kids != null ? x_190309.kids.length : 0);
				F.line = 2608;
				var i_191449 = 0;
				L6: do {
					F.line = 2609;
						L7: while (true) {
						if (!(i_191449 < colontmp__191448)) break L7;
							F.line = 86;
							i_190360 = i_191449;
							F.line = 87;
							var it_190361 = x_190309.kids[chckIndx(i_190360, 0, x_190309.kids.length+0-1)-0];
							F.line = 88;
							extract_items_190307(it_190361, heading_190310, items_190313, items_190313_Idx);
							F.line = 2611;
							i_191449 = addInt(i_191449, 1);
						}
				} while(false);
			} while(false);
		}
		
	} while (false);
	framePtr = F.prev;

	
}

function tree_190020(tag_190022, kids_190024) {
	var result_190025 = null;

	var F={procname:"dochack.tree",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		F.line = 11;
		result_190025 = document.createElement(toJSStr(tag_190022));
		L1: do {
			F.line = 12;
			var k_190056 = null;
			F.line = 3;
			var i_191466 = 0;
			L2: do {
				F.line = 4;
					L3: while (true) {
					if (!(i_191466 < (kids_190024 != null ? kids_190024.length : 0))) break L3;
						F.line = 12;
						k_190056 = kids_190024[chckIndx(i_191466, 0, kids_190024.length+0-1)-0];
						F.line = 13;
						result_190025.appendChild(k_190056);
						F.line = 6;
						i_191466 = addInt(i_191466, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_190025;

}

function text_190122(s_190124) {
	var result_190125 = null;

	var F={procname:"dochack.text",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		F.line = 27;
		result_190125 = document.createTextNode(s_190124);
	framePtr = F.prev;

	return result_190125;

}

function sys_fatal_54247(message_54251) {
	var F={procname:"sysFatal.sysFatal",prev:framePtr,filename:"../../lib/system/fatal.nim",line:0};
	framePtr = F;
		F.line = 34;
		var e_54402 = null;
		F.line = 35;
		e_54402 = {m_type: NTI44850, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		F.line = 36;
		e_54402.message = nimCopy(null, message_54251, NTI41040);
		F.line = 37;
		raiseException(e_54402, "AssertionError");
	framePtr = F.prev;

	
}

function raise_assert_54243(msg_54245) {
	var F={procname:"assertions.raiseAssert",prev:framePtr,filename:"../../lib/system/assertions.nim",line:0};
	framePtr = F;
		F.line = 20;
		sys_fatal_54247(msg_54245);
	framePtr = F.prev;

	
}

function failed_assert_impl_54435(msg_54437) {
	var F={procname:"assertions.failedAssertImpl",prev:framePtr,filename:"../../lib/system/assertions.nim",line:0};
	framePtr = F;
		F.line = 27;
		raise_assert_54243(msg_54437);
	framePtr = F.prev;

	
}

function uncovered_190920(x_190922) {
			var Tmp1;
		var Tmp2;

	var result_190923 = null;

	var F={procname:"dochack.uncovered",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
	BeforeRet: do {
			if (!((x_190922.kids != null ? x_190922.kids.length : 0) == 0)) Tmp1 = false; else {				Tmp1 = !((x_190922.heading == null));			}		if (Tmp1) {
		F.line = 194;
		if (!(x_190922.heading.hasOwnProperty('__karaxMarker__'))) {
		Tmp2 = x_190922;
		}
		else {
		Tmp2 = null;
		}
		
		result_190923 = Tmp2;
		break BeforeRet;
		}
		
		F.line = 195;
		result_190923 = {heading: x_190922.heading, kids: [], sortId: x_190922.sortId, doSort: x_190922.doSort};
		L3: do {
			F.line = 197;
			var i_190961 = 0;
			F.line = 2607;
			var colontmp__191478 = 0;
			F.line = 197;
			colontmp__191478 = (x_190922.kids != null ? x_190922.kids.length : 0);
			F.line = 2608;
			var i_191479 = 0;
			L4: do {
				F.line = 2609;
					L5: while (true) {
					if (!(i_191479 < colontmp__191478)) break L5;
						F.line = 197;
						i_190961 = i_191479;
						F.line = 198;
						var y_190962 = uncovered_190920(x_190922.kids[chckIndx(i_190961, 0, x_190922.kids.length+0-1)-0]);
						if (!((y_190962 == null))) {
						F.line = 199;
						if (result_190923.kids != null) { result_190923.kids.push(y_190962); } else { result_190923.kids = [y_190962]; };
						}
						
						F.line = 2611;
						i_191479 = addInt(i_191479, 1);
					}
			} while(false);
		} while(false);
		if (((result_190923.kids != null ? result_190923.kids.length : 0) == 0)) {
		F.line = 200;
		result_190923 = null;
		}
		
	} while (false);
	framePtr = F.prev;

	return result_190923;

}

function merge_tocs_190996(orig_190998, news_190999) {
	var result_191000 = null;

	var F={procname:"dochack.mergeTocs",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		F.line = 203;
		result_191000 = uncovered_190920(orig_190998);
		if ((result_191000 == null)) {
		F.line = 205;
		result_191000 = news_190999;
		}
		else {
			L1: do {
				F.line = 207;
				var i_191020 = 0;
				F.line = 2607;
				var colontmp__191472 = 0;
				F.line = 207;
				colontmp__191472 = (news_190999.kids != null ? news_190999.kids.length : 0);
				F.line = 2608;
				var i_191473 = 0;
				L2: do {
					F.line = 2609;
						L3: while (true) {
						if (!(i_191473 < colontmp__191472)) break L3;
							F.line = 207;
							i_191020 = i_191473;
							F.line = 208;
							if (result_191000.kids != null) { result_191000.kids.push(news_190999.kids[chckIndx(i_191020, 0, news_190999.kids.length+0-1)-0]); } else { result_191000.kids = [news_190999.kids[chckIndx(i_191020, 0, news_190999.kids.length+0-1)-0]]; };
							F.line = 2611;
							i_191473 = addInt(i_191473, 1);
						}
				} while(false);
			} while(false);
		}
		
	framePtr = F.prev;

	return result_191000;

}

function build_toc_191041(orig_191043, types_191045, procs_191046) {
	var result_191047 = null;

	var F={procname:"dochack.buildToc",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		F.line = 211;
		var new_stuff_191061 = {heading: null, kids: [], doSort: true, sortId: 0};
		L1: do {
			F.line = 212;
			var t_191214 = null;
			F.line = 156;
			var i_191461 = 0;
			F.line = 157;
			var l_191462 = (types_191045 != null ? types_191045.length : 0);
			L2: do {
				F.line = 158;
					L3: while (true) {
					if (!(i_191461 < l_191462)) break L3;
						F.line = 212;
						t_191214 = types_191045[chckIndx(i_191461, 0, types_191045.length+0-1)-0];
						F.line = 213;
						var c_191228 = {heading: t_191214.cloneNode(true), kids: [], doSort: true, sortId: 0};
						F.line = 214;
						t_191214.__karaxMarker__ = true;
						L4: do {
							F.line = 215;
							var p_191235 = null;
							F.line = 156;
							var i_191458 = 0;
							F.line = 157;
							var l_191459 = (procs_191046 != null ? procs_191046.length : 0);
							L5: do {
								F.line = 158;
									L6: while (true) {
									if (!(i_191458 < l_191459)) break L6;
										F.line = 215;
										p_191235 = procs_191046[chckIndx(i_191458, 0, procs_191046.length+0-1)-0];
										if (!(p_191235.hasOwnProperty('__karaxMarker__'))) {
										F.line = 217;
										var xx_191236 = p_191235.parentNode.getElementsByClassName("attachedType");
										if ((((xx_191236 != null ? xx_191236.length : 0) == 1) && (xx_191236[chckIndx(0, 0, xx_191236.length+0-1)-0].textContent == t_191214.textContent))) {
										F.line = 220;
										var q_191244 = tree_190020(makeNimstrLit("A"), [text_190122(p_191235.title)]);
										F.line = 221;
										q_191244.setAttribute("href", p_191235.getAttribute("href"));
										F.line = 222;
										if (c_191228.kids != null) { c_191228.kids.push({heading: q_191244, kids: [], sortId: 0, doSort: false}); } else { c_191228.kids = [{heading: q_191244, kids: [], sortId: 0, doSort: false}]; };
										F.line = 223;
										p_191235.__karaxMarker__ = true;
										}
										
										}
										
										F.line = 160;
										i_191458 = addInt(i_191458, 1);
										if (!(((procs_191046 != null ? procs_191046.length : 0) == l_191459))) {
										F.line = 161;
										failed_assert_impl_54435(makeNimstrLit("/Users/travis/build/nim-lang/Nim/lib/system/iterators.nim(161, 11) `len(a) == L` seq modified while iterating over it"));
										}
										
									}
							} while(false);
						} while(false);
						F.line = 224;
						if (new_stuff_191061.kids != null) { new_stuff_191061.kids.push(c_191228); } else { new_stuff_191061.kids = [c_191228]; };
						F.line = 160;
						i_191461 = addInt(i_191461, 1);
						if (!(((types_191045 != null ? types_191045.length : 0) == l_191462))) {
						F.line = 161;
						failed_assert_impl_54435(makeNimstrLit("/Users/travis/build/nim-lang/Nim/lib/system/iterators.nim(161, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 225;
		result_191047 = merge_tocs_190996(orig_191043, new_stuff_191061);
	framePtr = F.prev;

	return result_191047;

}

function add_190070(parent_190072, kid_190073) {
			var Tmp1;
				var Tmp2;

	var F={procname:"dochack.add",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
			if (!(parent_190072.nodeName == "TR")) Tmp1 = false; else {				if ((kid_190073.nodeName == "TD")) Tmp2 = true; else {					Tmp2 = (kid_190073.nodeName == "TH");				}				Tmp1 = Tmp2;			}		if (Tmp1) {
		F.line = 18;
		var k_190074 = document.createElement("TD");
		F.line = 19;
		k_190074.appendChild(kid_190073);
		F.line = 20;
		parent_190072.appendChild(k_190074);
		}
		else {
			F.line = 22;
		parent_190072.appendChild(kid_190073);
		}
		
	framePtr = F.prev;

	
}

function set_class_190088(e_190090, value_190091) {
	var F={procname:"dochack.setClass",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		F.line = 25;
		e_190090.setAttribute("class", toJSStr(value_190091));
	framePtr = F.prev;

	
}

function to_html_190375(x_190377, is_root_190378) {
			var Tmp1;

		function HEX3Aanonymous_190418(a_190420, b_190421) {
					var Tmp1;

			var result_190422 = 0;

			var F={procname:"toHtml.:anonymous",prev:framePtr,filename:"dochack.nim",line:0};
			framePtr = F;
			BeforeRet: do {
					if (!!((a_190420.heading == null))) Tmp1 = false; else {						Tmp1 = !((b_190421.heading == null));					}				if (Tmp1) {
				F.line = 106;
				var x_190439 = a_190420.heading.textContent;
				F.line = 107;
				var y_190440 = b_190421.heading.textContent;
				if ((x_190439 < y_190440)) {
				F.line = 108;
				result_190422 = -1;
				break BeforeRet;
				}
				
				if ((y_190440 < x_190439)) {
				F.line = 109;
				result_190422 = 1;
				break BeforeRet;
				}
				
				F.line = 110;
				result_190422 = 0;
				break BeforeRet;
				}
				else {
					F.line = 113;
					result_190422 = subInt(a_190420.sortId, b_190421.sortId);
					break BeforeRet;
				}
				
			} while (false);
			framePtr = F.prev;

			return result_190422;

		}

	var result_190379 = null;

	var F={procname:"dochack.toHtml",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if ((x_190377 == null)) {
		F.line = 91;
		result_190379 = null;
		break BeforeRet;
		}
		
		if (((x_190377.kids != null ? x_190377.kids.length : 0) == 0)) {
		if ((x_190377.heading == null)) {
		F.line = 93;
		result_190379 = null;
		break BeforeRet;
		}
		
		F.line = 94;
		result_190379 = x_190377.heading.cloneNode(true);
		break BeforeRet;
		}
		
		F.line = 95;
		result_190379 = tree_190020(makeNimstrLit("DIV"), []);
			if (!!((x_190377.heading == null))) Tmp1 = false; else {				Tmp1 = !(x_190377.heading.hasOwnProperty('__karaxMarker__'));			}		if (Tmp1) {
		F.line = 97;
		add_190070(result_190379, x_190377.heading.cloneNode(true));
		}
		
		F.line = 98;
		var ul_190415 = tree_190020(makeNimstrLit("UL"), []);
		if (is_root_190378) {
		F.line = 100;
		set_class_190088(ul_190415, makeNimstrLit("simple simple-toc"));
		}
		else {
			F.line = 102;
		set_class_190088(ul_190415, makeNimstrLit("simple"));
		}
		
		if (x_190377.doSort) {
		F.line = 104;
		x_190377.kids.sort(HEX3Aanonymous_190418);
		}
		
		L2: do {
			F.line = 115;
			var k_190614 = null;
			F.line = 154;
			var colontmp__191485 = null;
			F.line = 115;
			colontmp__191485 = x_190377.kids;
			F.line = 156;
			var i_191487 = 0;
			F.line = 157;
			var l_191488 = (colontmp__191485 != null ? colontmp__191485.length : 0);
			L3: do {
				F.line = 158;
					L4: while (true) {
					if (!(i_191487 < l_191488)) break L4;
						F.line = 115;
						k_190614 = colontmp__191485[chckIndx(i_191487, 0, colontmp__191485.length+0-1)-0];
						F.line = 116;
						var y_190615 = to_html_190375(k_190614, false);
						if (!((y_190615 == null))) {
						F.line = 118;
						add_190070(ul_190415, tree_190020(makeNimstrLit("LI"), [y_190615]));
						}
						
						F.line = 160;
						i_191487 = addInt(i_191487, 1);
						if (!(((colontmp__191485 != null ? colontmp__191485.length : 0) == l_191488))) {
						F.line = 161;
						failed_assert_impl_54435(makeNimstrLit("/Users/travis/build/nim-lang/Nim/lib/system/iterators.nim(161, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		if (!((ul_190415.childNodes.length == 0))) {
		F.line = 119;
		add_190070(result_190379, ul_190415);
		}
		
		if ((result_190379.childNodes.length == 0)) {
		F.line = 120;
		result_190379 = null;
		}
		
	} while (false);
	framePtr = F.prev;

	return result_190379;

}

function replace_by_id_190142(id_190144, new_tree_190145) {
	var F={procname:"dochack.replaceById",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		F.line = 32;
		var x_190146 = document.getElementById(id_190144);
		F.line = 33;
		x_190146.parentNode.replaceChild(new_tree_190145, x_190146);
		F.line = 34;
		new_tree_190145.id = id_190144;
	framePtr = F.prev;

	
}

function togglevis_191299(d_191301) {
	var F={procname:"dochack.togglevis",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		F.line = 230;
		    if (d_191301.style.display == 'none')
      d_191301.style.display = 'inline';
    else
      d_191301.style.display = 'none';
  
	framePtr = F.prev;

	
}

function groupBy(value_191317) {
	var F={procname:"dochack.groupBy",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		F.line = 238;
		var toc_191318 = document.getElementById("toc-list");
		if ((alternative_191285[0] == null)) {
		F.line = 240;
		var tt_191337 = {heading: null, kids: [], sortId: 0, doSort: false};
		F.line = 241;
		to_toc_190673(toc_191318, tt_191337);
		F.line = 242;
		tt_191337 = tt_191337.kids[chckIndx(0, 0, tt_191337.kids.length+0-1)-0];
		F.line = 244;
		var types_191352 = [[]];
		F.line = 245;
		var procs_191367 = [[]];
		F.line = 247;
		extract_items_190307(tt_191337, "Types", types_191352, 0);
		F.line = 248;
		extract_items_190307(tt_191337, "Procs", procs_191367, 0);
		F.line = 249;
		extract_items_190307(tt_191337, "Converters", procs_191367, 0);
		F.line = 250;
		extract_items_190307(tt_191337, "Methods", procs_191367, 0);
		F.line = 251;
		extract_items_190307(tt_191337, "Templates", procs_191367, 0);
		F.line = 252;
		extract_items_190307(tt_191337, "Macros", procs_191367, 0);
		F.line = 253;
		extract_items_190307(tt_191337, "Iterators", procs_191367, 0);
		F.line = 255;
		var ntoc_191375 = build_toc_191041(tt_191337, types_191352[0], procs_191367[0]);
		F.line = 256;
		var x_191376 = to_html_190375(ntoc_191375, true);
		F.line = 257;
		alternative_191285[0] = tree_190020(makeNimstrLit("DIV"), [x_191376]);
		}
		
		if ((value_191317 == "type")) {
		F.line = 259;
		replace_by_id_190142("tocRoot", alternative_191285[0]);
		}
		else {
			F.line = 261;
		replace_by_id_190142("tocRoot", tree_190020(makeNimstrLit("DIV"), []));
		}
		
		F.line = 262;
		togglevis_191299(document.getElementById("toc-list"));
	framePtr = F.prev;

	
}
var db_191491 = [null];
var contents_191493 = [null];
var oldtoc_191742 = [null];
var timer_191743 = [null];

function raiseRangeError() {
		var e_60425 = null;
		e_60425 = {m_type: NTI44862, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		e_60425.message = nimCopy(null, makeNimstrLit("value out of range"), NTI41040);
		e_60425.parent = null;
		raiseException(e_60425, "RangeError");

	
}

function nsuToLowerAsciiChar(c_178980) {
	var result_178981 = 0;

	var F={procname:"strutils.toLowerAscii",prev:framePtr,filename:"../../lib/pure/strutils.nim",line:0};
	framePtr = F;
		if ((ConstSet2[c_178980] != undefined)) {
		F.line = 222;
		result_178981 = chckRange(addInt(c_178980, 32), 0, 255);
		}
		else {
			F.line = 224;
			result_178981 = c_178980;
		}
		
	framePtr = F.prev;

	return result_178981;

}

function fuzzy_match_189070(pattern_189072, str_189073) {
							var Tmp4;
							var Tmp5;
								var Tmp6;

	var result_189077 = {Field0: 0, Field1: false};

	var F={procname:"fuzzysearch.fuzzyMatch",prev:framePtr,filename:"fuzzysearch.nim",line:0};
	framePtr = F;
		F.line = 37;
		var score_state_189078 = -100;
		F.line = 38;
		var header_matched_189079 = false;
		F.line = 39;
		var unmatched_leading_char_count_189081 = 0;
		F.line = 40;
		var consecutive_match_count_189083 = 0;
		F.line = 41;
		var str_index_189085 = 0;
		F.line = 42;
		var pat_index_189087 = 0;
		F.line = 43;
		var score_189089 = 0;
		L1: do {
			F.line = 49;
				L2: while (true) {
				if (!((str_index_189085 < (str_189073 != null ? str_189073.length : 0)) && (pat_index_189087 < (pattern_189072 != null ? pattern_189072.length : 0)))) break L2;
					L3: do {
						F.line = 51;
						var pattern_char_189096 = nsuToLowerAsciiChar(pattern_189072.charCodeAt(chckIndx(pat_index_189087, 0, pattern_189072.length+0-1)-0));
						F.line = 52;
						var str_char_189097 = nsuToLowerAsciiChar(str_189073.charCodeAt(chckIndx(str_index_189085, 0, str_189073.length+0-1)-0));
						if ((ConstSet3[pattern_char_189096] != undefined)) {
						F.line = 56;
						pat_index_189087 = addInt(pat_index_189087, 1);
						F.line = 57;
						break L3;
						}
						
						if ((ConstSet4[str_char_189097] != undefined)) {
						F.line = 59;
						str_index_189085 = addInt(str_index_189085, 1);
						F.line = 60;
						break L3;
						}
						
						if ((!(header_matched_189079) && (str_char_189097 == 58))) {
						F.line = 65;
						header_matched_189079 = true;
						F.line = 66;
						score_state_189078 = -100;
						F.line = 67;
						score_189089 = Math.trunc(Math.floor((5.0000000000000000e-01 * score_189089)));
						F.line = 68;
						pat_index_189087 = 0;
						F.line = 69;
						str_index_189085 = addInt(str_index_189085, 1);
						F.line = 70;
						break L3;
						}
						
						if ((str_char_189097 == pattern_char_189096)) {
						F.line = 73;
						switch (score_state_189078) {
						case -100:
						case 20:
							F.line = 75;
							score_state_189078 = 10;
							break;
						case 0:
							F.line = 78;
							score_state_189078 = 5;
							F.line = 78;
							score_189089 = addInt(score_189089, score_state_189078);
							break;
						case 10:
						case 5:
							F.line = 81;
							consecutive_match_count_189083 = addInt(consecutive_match_count_189083, 1);
							F.line = 82;
							score_state_189078 = 5;
							F.line = 83;
							score_189089 = addInt(score_189089, mulInt(5, consecutive_match_count_189083));
							if ((score_state_189078 == 10)) {
							F.line = 86;
							score_189089 = addInt(score_189089, 10);
							}
							
							F.line = 88;
							var on_boundary_189172 = (pat_index_189087 == (pattern_189072 != null ? (pattern_189072.length-1) : -1));
							if ((!(on_boundary_189172) && (str_index_189085 < (str_189073 != null ? (str_189073.length-1) : -1)))) {
							F.line = 91;
							var next_pattern_char_189173 = nsuToLowerAsciiChar(pattern_189072.charCodeAt(chckIndx(addInt(pat_index_189087, 1), 0, pattern_189072.length+0-1)-0));
							F.line = 92;
							var next_str_char_189174 = nsuToLowerAsciiChar(str_189073.charCodeAt(chckIndx(addInt(str_index_189085, 1), 0, str_189073.length+0-1)-0));
							F.line = 95;
							if (!!((ConstSet5[next_str_char_189174] != undefined))) Tmp4 = false; else {								Tmp4 = !((next_str_char_189174 == next_pattern_char_189173));							}							on_boundary_189172 = Tmp4;
							}
							
							if (on_boundary_189172) {
							F.line = 100;
							score_state_189078 = 20;
							F.line = 100;
							score_189089 = addInt(score_189089, score_state_189078);
							}
							
							break;
						case -1:
						case -3:
							F.line = 103;
							if (!((ConstSet6[str_189073.charCodeAt(chckIndx(subInt(str_index_189085, 1), 0, str_189073.length+0-1)-0)] != undefined))) Tmp5 = true; else {								if (!(ConstSet7[str_189073.charCodeAt(chckIndx(subInt(str_index_189085, 1), 0, str_189073.length+0-1)-0)] != undefined)) Tmp6 = false; else {									Tmp6 = (ConstSet8[str_189073.charCodeAt(chckIndx(str_index_189085, 0, str_189073.length+0-1)-0)] != undefined);								}								Tmp5 = Tmp6;							}							var is_leading_char_189212 = Tmp5;
							if (is_leading_char_189212) {
							F.line = 110;
							score_state_189078 = 10;
							}
							else {
								F.line = 114;
								score_state_189078 = 0;
								F.line = 114;
								score_189089 = addInt(score_189089, score_state_189078);
							}
							
							break;
						}
						F.line = 115;
						pat_index_189087 = addInt(pat_index_189087, 1);
						}
						else {
							F.line = 118;
							switch (score_state_189078) {
							case -100:
								F.line = 120;
								score_state_189078 = -3;
								F.line = 120;
								score_189089 = addInt(score_189089, score_state_189078);
								break;
							case 5:
								F.line = 123;
								score_state_189078 = -1;
								F.line = 123;
								score_189089 = addInt(score_189089, score_state_189078);
								F.line = 124;
								consecutive_match_count_189083 = 0;
								break;
							case -3:
								if ((unmatched_leading_char_count_189081 < 3)) {
								F.line = 128;
								score_state_189078 = -3;
								F.line = 128;
								score_189089 = addInt(score_189089, score_state_189078);
								}
								
								F.line = 129;
								unmatched_leading_char_count_189081 = addInt(unmatched_leading_char_count_189081, 1);
								break;
							default: 
								F.line = 132;
								score_state_189078 = -1;
								F.line = 132;
								score_189089 = addInt(score_189089, score_state_189078);
								break;
							}
						}
						
						F.line = 134;
						str_index_189085 = addInt(str_index_189085, 1);
					} while(false);
				}
		} while(false);
		F.line = 136;
		nimCopy(result_189077, {Field0: nimMax(0, score_189089), Field1: (0 < score_189089)}, NTI189074);
	framePtr = F.prev;

	return result_189077;

}

function text_190105(s_190107) {
	var result_190108 = null;

	var F={procname:"dochack.text",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		F.line = 26;
		result_190108 = document.createTextNode(toJSStr(s_190107));
	framePtr = F.prev;

	return result_190108;

}

function dosearch_191510(value_191512) {

		function HEX3Aanonymous_191670(a_191679, b_191680) {
			var result_191684 = 0;

			var F={procname:"dosearch.:anonymous",prev:framePtr,filename:"dochack.nim",line:0};
			framePtr = F;
				F.line = 305;
				result_191684 = subInt(b_191680["Field1"], a_191679["Field1"]);
			framePtr = F.prev;

			return result_191684;

		}

	var result_191513 = null;

	var F={procname:"dochack.dosearch",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		if (((db_191491[0] != null ? db_191491[0].length : 0) == 0)) {
		F.line = 272;
		var stuff_191519 = null;
		F.line = 273;
		    var request = new XMLHttpRequest();
    request.open("GET", "theindex.html", false);
    request.send(null);

    var doc = document.implementation.createHTMLDocument("theindex");
    doc.documentElement.innerHTML = request.responseText;

    //parser=new DOMParser();
    //doc=parser.parseFromString("<html></html>", "text/html");

    stuff_191519 = doc.documentElement;
    
		F.line = 286;
		db_191491[0] = nimCopy(null, stuff_191519.getElementsByClassName("reference"), NTI81245);
		F.line = 287;
		contents_191493[0] = nimCopy(null, [], NTI191532);
		L1: do {
			F.line = 288;
			var ahref_191614 = null;
			F.line = 156;
			var i_191811 = 0;
			F.line = 157;
			var l_191812 = (db_191491[0] != null ? db_191491[0].length : 0);
			L2: do {
				F.line = 158;
					L3: while (true) {
					if (!(i_191811 < l_191812)) break L3;
						F.line = 288;
						ahref_191614 = db_191491[0][chckIndx(i_191811, 0, db_191491[0].length+0-1)-0];
						F.line = 289;
						if (contents_191493[0] != null) { contents_191493[0].push(ahref_191614.getAttribute("data-doc-search-tag")); } else { contents_191493[0] = [ahref_191614.getAttribute("data-doc-search-tag")]; };
						F.line = 160;
						i_191811 = addInt(i_191811, 1);
						if (!(((db_191491[0] != null ? db_191491[0].length : 0) == l_191812))) {
						F.line = 161;
						failed_assert_impl_54435(makeNimstrLit("/Users/travis/build/nim-lang/Nim/lib/system/iterators.nim(161, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		}
		
		F.line = 290;
		var ul_191625 = tree_190020(makeNimstrLit("UL"), []);
		F.line = 291;
		result_191513 = tree_190020(makeNimstrLit("DIV"), []);
		F.line = 292;
		set_class_190088(result_191513, makeNimstrLit("search_results"));
		F.line = 293;
		var matches_191644 = [];
		L4: do {
			F.line = 294;
			var i_191656 = 0;
			F.line = 2607;
			var colontmp__191818 = 0;
			F.line = 294;
			colontmp__191818 = (db_191491[0] != null ? db_191491[0].length : 0);
			F.line = 2608;
			var i_191819 = 0;
			L5: do {
				F.line = 2609;
					L6: while (true) {
					if (!(i_191819 < colontmp__191818)) break L6;
						F.line = 294;
						i_191656 = i_191819;
						L7: do {
							F.line = 295;
							var c_191657 = contents_191493[0][chckIndx(i_191656, 0, contents_191493[0].length+0-1)-0];
							if (((c_191657 == "Examples") || (c_191657 == "PEG construction"))) {
							F.line = 300;
							break L7;
							}
							
							F.line = 301;
							var colontmp__191828 = {Field0: 0, Field1: false};
							F.line = 301;
							var score_191658 = 0;
							F.line = 301;
							var matched_191659 = false;
							F.line = 301;
							nimCopy(colontmp__191828, fuzzy_match_189070(value_191512, c_191657), NTI189074);
							F.line = 301;
							score_191658 = colontmp__191828["Field0"];
							F.line = 301;
							matched_191659 = colontmp__191828["Field1"];
							if (matched_191659) {
							F.line = 303;
							if (matches_191644 != null) { matches_191644.push({Field0: db_191491[0][chckIndx(i_191656, 0, db_191491[0].length+0-1)-0], Field1: score_191658}); } else { matches_191644 = [{Field0: db_191491[0][chckIndx(i_191656, 0, db_191491[0].length+0-1)-0], Field1: score_191658}]; };
							}
							
						} while(false);
						F.line = 2611;
						i_191819 = addInt(i_191819, 1);
					}
			} while(false);
		} while(false);
		F.line = 305;
		matches_191644.sort(HEX3Aanonymous_191670);
		L8: do {
			F.line = 306;
			var i_191722 = 0;
			F.line = 2607;
			var colontmp__191824 = 0;
			F.line = 306;
			colontmp__191824 = nimMin((matches_191644 != null ? matches_191644.length : 0), 19);
			F.line = 2608;
			var i_191825 = 0;
			L9: do {
				F.line = 2609;
					L10: while (true) {
					if (!(i_191825 < colontmp__191824)) break L10;
						F.line = 306;
						i_191722 = i_191825;
						F.line = 307;
						matches_191644[chckIndx(i_191722, 0, matches_191644.length+0-1)-0]["Field0"].innerHTML = matches_191644[chckIndx(i_191722, 0, matches_191644.length+0-1)-0]["Field0"].getAttribute("data-doc-search-tag");
						F.line = 308;
						add_190070(ul_191625, tree_190020(makeNimstrLit("LI"), [matches_191644[chckIndx(i_191722, 0, matches_191644.length+0-1)-0]["Field0"]]));
						F.line = 2611;
						i_191825 = addInt(i_191825, 1);
					}
			} while(false);
		} while(false);
		if ((ul_191625.childNodes.length == 0)) {
		F.line = 310;
		add_190070(result_191513, tree_190020(makeNimstrLit("B"), [text_190105(makeNimstrLit("no search results"))]));
		}
		else {
			F.line = 312;
			add_190070(result_191513, tree_190020(makeNimstrLit("B"), [text_190105(makeNimstrLit("search results"))]));
			F.line = 313;
			add_190070(result_191513, ul_191625);
		}
		
	framePtr = F.prev;

	return result_191513;

}

function search() {

		function wrapper_191759() {
			var F={procname:"search.wrapper",prev:framePtr,filename:"dochack.nim",line:0};
			framePtr = F;
				F.line = 320;
				var elem_191761 = document.getElementById("searchInput");
				F.line = 321;
				var value_191762 = elem_191761.value;
				if (!(((value_191762 != null ? value_191762.length : 0) == 0))) {
				if ((oldtoc_191742[0] == null)) {
				F.line = 324;
				oldtoc_191742[0] = document.getElementById("tocRoot");
				}
				
				F.line = 325;
				var results_191768 = dosearch_191510(value_191762);
				F.line = 326;
				replace_by_id_190142("tocRoot", results_191768);
				}
				else {
				if (!((oldtoc_191742[0] == null))) {
				F.line = 328;
				replace_by_id_190142("tocRoot", oldtoc_191742[0]);
				}
				}
			framePtr = F.prev;

			
		}

	var F={procname:"dochack.search",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		if (!((timer_191743[0] == null))) {
		F.line = 330;
		clearTimeout(timer_191743[0]);
		}
		
		F.line = 331;
		timer_191743[0] = setTimeout(wrapper_191759, 400);
	framePtr = F.prev;

	
}
